import java.util.ArrayList;
import java.util.HashMap;

class MinMalwareSpread {
    class UnionFind {
        int[] parent;
        public UnionFind(int n) {
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        public int find(int p) {
            while (p != parent[p]) {
                parent[p] = parent[parent[p]];
                p = parent[p];
            }
            return p;
        }
        public boolean isConnected(int p, int q) {
            return find(p) == find(q);
        }
        public void union(int p, int q) {
            int pRoot = find(p);
            int qRoot = find(q);
            if (pRoot == qRoot) return;

            parent[pRoot] = qRoot;
        }
        public HashMap<Integer, ArrayList<Integer>> getGroup() {
            HashMap<Integer, ArrayList<Integer>> res = new HashMap<>();
            for (int i = 0; i < parent.length; i++) {
                int root = find(i);
                if (!res.containsKey(root)) {
                    res.put(root, new ArrayList<>());
                }
                res.get(root).add(i);
            }
            return res;
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                if (graph[i][j] == 1) {
                    if (!uf.isConnected(i, j)) {
                        uf.union(i, j);
                    }
                }
            }
        }
        HashMap<Integer, ArrayList<Integer>> group = uf.getGroup();
        HashMap<Integer, Integer> map = new HashMap<>();

        int res = 0x3f3f3f3f;
        for (int i = 0; i < initial.length; i++) {
            map.put(initial[i], i);
            res = Math.min(initial[i], res);
        }

        int subMax = -1;
        for (ArrayList<Integer> g : group.values()) {
            int cnt = 0;
            int idx = -1;
            for (int i = 0; i < g.size(); i++) {
                if (map.containsKey(g.get(i))) {
                    cnt++;
                    idx = g.get(i);
                }
            }
            if (cnt == 1) {
                if (g.size() - 1 > subMax) {
                    subMax = g.size() - 1;
                    res = idx;
                }
                if (g.size() - 1 == subMax) {
                    if (idx < res) {
                        res = idx;
                    }
                }
            }
        }
        return res;
    }
}
